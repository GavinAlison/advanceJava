73	By default or with ALL, returns the number of input rows for which expression is not NULL. Use DISTINCT for one unique instance of each value.	COUNT([ ALL ] expression | DISTINCT expression1 [, expression2]*)	test_tenant	 			AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
74	Returns the number of input rows.	COUNT(*)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
75	Returns the number of input rows.	COUNT(1)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
76	By default or with keyword ALL, returns the average (arithmetic mean) of expression across all input rows. Use DISTINCT for one unique instance of each value.	AVG([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
77	By default or with keyword ALL, returns the sum of expression across all input rows. Use DISTINCT for one unique instance of each value.	SUM([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
78	By default or with keyword ALL, returns the maximum value of expression across all input rows. Use DISTINCT for one unique instance of each value.	MAX([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
79	By default or with keyword ALL, returns the minimum value of expression across all input rows. Use DISTINCT for one unique instance of each value.	MIN([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
80	By default or with keyword ALL, returns the population standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.	STDDEV_POP([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
81	By default or with keyword ALL, returns the sample standard deviation of expression across all input rows. Use DISTINCT for one unique instance of each value.	STDDEV_SAMP([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
82	By default or with keyword ALL, returns the population variance (square of the population standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.	VAR_POP([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
83	By default or with keyword ALL, returns the sample variance (square of the sample standard deviation) of expression across all input rows. Use DISTINCT for one unique instance of each value.	VAR_SAMP([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
84	By default or with keyword ALL, returns a multiset of expression across all input rows. NULL values will be ignored. Use DISTINCT for one unique instance of each value.	COLLECT([ ALL | DISTINCT ] expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
85	Synonyms for VAR_SAMP(). Only supported in blink planner.	VARIANCE([ ALL | DISTINCT ] expression)	test_tenant	 TIMESTAMPADD(WEEK, 1, DATE '2003-01-02') returns 2003-01-09.			AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
86	Returns the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.	RANK()	test_tenant	TIMESTAMPDIFF(DAY, TIMESTAMP '2003-01-02 10:00:00', TIMESTAMP '2003-01-03 10:00:00') leads to 1.			AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
87	Returns the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.	DENSE_RANK()	test_tenant	 CONVERT_TZ('1970-01-01 00:00:00', 'UTC', 'America/Los_Angeles') returns '1969-12-31 16:00:00'.			AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
88	Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition. ROW_NUMBER and RANK are similar. ROW_NUMBER numbers all rows sequentially (for example 1, 2, 3, 4, 5). RANK provides the same numeric value for ties (for example 1, 2, 2, 4, 5).	ROW_NUMBER()	test_tenant	FROM_UNIXTIME(44) returns '1970-01-01 00:00:44' if in UTC time zone, but returns '1970-01-01 09:00:44' if in 'Asia/Tokyo' time zone.			AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
89	Returns the value of expression at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is NULL.	LEAD(expression [, offset] [, default] )	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
90	Returns the value of expression at the offsetth row before the current row in the window. The default value of offset is 1 and the default value of default is NULL.	LAG(expression [, offset] [, default])	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
91	Returns the first value in an ordered set of values.	FIRST_VALUE(expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
92	Returns the last value in an ordered set of values.	LAST_VALUE(expression)	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
93	Concatenates the values of string expressions and places separator values between them. The separator is not added at the end of string. The default value of separator is ','.	LISTAGG(expression [, separator])	test_tenant				AggregateFunction	0	1	admin	2020/11/30 10:29	admin	2020/11/30 10:29
